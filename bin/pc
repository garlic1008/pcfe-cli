#!/usr/bin/env node

const program = require('commander')
const inquirer = require('inquirer')
const homedir = require('os').homedir()
const fs = require('fs')
const path = require('path')
const ora = require('ora')
const { promisify: pify } = require('util')
const chalk = require('chalk')
const generate = require('../lib/generate')
const {
  svnUrl,
  svnExport,
  svnList,
  svnCat
} = require('../lib/svn')

program
  .version(require('../package.json').version, '-v --version')
  .usage('[options] <projectName> [templateName]')
  .option('--offline', '使用缓存的模版')
  .action(async (projectName, ...args) => {
    if (!projectName) {
      return console.log('缺少项目名')
    }

    try {
      const projectDir = path.join(process.cwd(), projectName)
      fs.accessSync(projectDir)
      const answer = await inquirer.prompt([{ name: 'override', type: 'confirm', default: false, message: `${projectName} 目录已存在，是否覆盖？` }])
      if (answer.override) {
        fs.rmdirSync(projectDir)
      } else {
        return ora().fail('你拒绝了覆盖，任务取消！')
      }
    } catch (error) {
    }

    let template
    let cmd = {}
    args.forEach(arg => {
      if (typeof arg === 'string') {
        template = path.join(homedir, '.pc-templates', arg)
      }
      if (typeof arg === 'object') {
        cmd = arg
      }
    })

    if (!template) {
      try {
        const templateList = await getTemplateList(cmd.offline)
        const { templateName } = await inquirer.prompt([{
          type: 'list',
          name: 'templateName',
          message: '请选择模版',
          choices: templateList
        }])

        template = path.join(homedir, '.pc-templates', templateName)

        if (!cmd.offline) {
          await downloadSvnTemplate(svnUrl(`pc-templates/${templateName}`), template)
        }
      } catch (error) {
        console.log(error)
      }
    }

    generate(projectName, template)
  })

program
  .command('template [command]')
  .description('查看所有模版')
  .option('--offline', '查看离线模版列表')
  .action(async (command) => {
    let header
    let templateList
    if (command === 'update') {
      const spinner = ora('正在更新模版列表').start()
      try {
        await downloadTemplateList()
        spinner.succeed('模版列表更新完成')
      } catch (error) {
        spinner.fail('模版更新失败')
      }
      header = '离线模版列表：'

      try {
        templateList = await getOfflineTemplateList()
      } catch (error) {
        console.log(error)
      }
    } else {
      const spinner = ora('正在获取模版列表').start()
      if (program.offline) {
        header = '离线模版列表：'
        templateList = await getOfflineTemplateList()
      } else {
        templateList = await getSvnTemplateList()
        header = '线上模版列表:'
      }
      spinner.stop()
    }

    if (header && templateList) {
      console.log(chalk.green(header))
      console.log(`· ${templateList.map(tpl => tpl.name).join('\n· ')}`)
    }
  })

program
  .command('update')
  .description('升级 pcgroup-cli')
  .action(async (cmd) => {

  })

program.parse(process.argv)

async function getTemplateList (offline) {
  const spinner = ora('正在获取模版列表').start()

  const templateList = offline ? (await getOfflineTemplateList()) : (await getSvnTemplateList())

  spinner.stop()

  return templateList
}

async function downloadTemplateList () {
  return svnExport(svnUrl('pc-templates'), path.join(homedir, '/.pc-templates'), { force: true })
}

function makeTemplateList (templateList, listDesc = {}) {
  return templateList.map(tpl => ({
    name: `${tpl} ${chalk.gray(listDesc[tpl] || '')}`,
    value: tpl,
    short: tpl
  }))
}

async function getOfflineTemplateList () {
  const templateDir = path.join(homedir, '/.pc-templates')

  let templateList, listDesc
  try {
    [templateList, listDesc] = await Promise.all([
      pify(fs.readdir)(templateDir),
      pify(fs.readFile)(path.join(templateDir, 'list.json'), 'utf-8')
    ])
  } catch (error) {
  }

  if (typeof listDesc === 'string') {
    listDesc = JSON.parse(listDesc)
  }

  return makeTemplateList(templateList, listDesc)
}

async function getSvnTemplateList () {
  let [list, listDesc] = await Promise.all([
    svnList(svnUrl('pc-templates')),
    svnCat(svnUrl('pc-templates/list.json'))
  ])

  listDesc = JSON.parse(listDesc)

  const templateList = list.list.entry
    .filter(f => f.name !== 'list.json')
    .map(f => ({
      name: f.name + (listDesc[f.name] ? ` ${chalk.gray(listDesc[f.name])}` : ''),
      value: f.name,
      short: f.name
    }))

  return templateList
}

async function downloadSvnTemplate (svnUrl, templatePath) {
  return svnExport(svnUrl, templatePath, { force: true })
}

if (!program.args.length) program.help()
